#!/usr/bin/env python
from xml.etree import ElementTree
from xml.etree.ElementTree import Element

class XMLManager:
    """deal with xml file generation"""
    
    def dictToXML(self, datadict, head):
        root = ElementTree.Element(head)
        for key, value in datadict.items():            
            if type(value)==dict:
                root.append(self.dictToXML(value, key))
            else:
                e = ElementTree.Element(key)
                if value==None or value=='None':
                    e.text = 'NULL'
                elif type(value)==str:
                    e.text = value.decode('utf8')
                else:
                    e.text = unicode(value)
                root.append(e)
        return root
    
    def XMLToDict(self, xmlstring, withHead=False):
        xmlstring = xmlstring.replace("encoding='utf8'", "encoding='UTF-8'")
        # ridiculous!
        # xmlstring generated by ElementTree can not be parse by ElementTree itself,
        # because it doesn't know utf8 but only knows UTF-8.
        root = ElementTree.fromstring(xmlstring)
        d = self.XElementToDict(root)
        return d
                
    def XElementToDict(self, xe):
        d = {}
        for c in xe.getchildren():
            if not c.getchildren():
                if type(c.text)==unicode:
                    d[c.tag] = c.text.encode('utf8')
                else:
                    d[c.tag] = c.text
            else:
                d[c.tag] = self.XElementToDict(c)
        return d
        
        

if __name__=='__main__':
    import db
    import conf
    import logger
    d = db.Db(conf.mysql_options)
    d.log = logger.Logger('logs', 'debug.txt')
    x = XMLManager()
    data = d.getDatas('student_info', 'sync is null')[0]
    datadict = {}
    datadict['table']='lala'
    datadict['method'] = 'upload'
    datadict['data'] = data
    xe = x.dictToXML(datadict,'root')
    xs = ElementTree.tostring(xe, encoding='utf8')
    data2 = x.XMLToDict(xs)
